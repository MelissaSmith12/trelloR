% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trello_get.R
\name{trello_get}
\alias{trello_get}
\title{Get Data From Trello API}
\usage{
trello_get(url, token, query = NULL, paging = FALSE)
}
\arguments{
\item{url}{url for the GET request, see \code{\link[httr]{GET}} for details}

\item{token}{previously generated token, see \code{\link{get_token}} for how to obtain it}

\item{query}{url parameters that form the query, see \code{\link[httr]{GET}} for details}

\item{paging}{logical whether paging should be used (if not, results will be limited to 1000 rows)}
}
\description{
Issues \code{\link[httr]{GET}} requests for Trello API endpoints.
}
\details{
It accepts JSON responses and uses \code{\link[jsonlite]{fromJSON}} to convert them into flat \code{data.frame}s. It hrows an error if non-JSON type of data is received. It also takes care of paging (if \code{paging = TRUE}), setting the query parameter \code{before} to the earliest date from the previous result, essentially getting all there is for the given request.

For unsuccessfull requests, server error messages are extracted from the response header and reprinted on the console.

Functions such as \code{\link{get_board_cards}} or \code{\link{get_card_comments}} are convenience wrappers for this function. They remove the need for specifying the query parameters and optionally simplify the result so as to give you more consistent and easy to work with data.
}
\examples{
\dontrun{
# First, obtain a secure token to communicate with Trello API
token = get_token("your_key", "your_secret")

# Second, build an URL
id  = "id_of_a_given_board"
url = paste0("https://api.trello.com/1/boards/", id, "/cards")

# Third, store query parametrs in a list (see ?httr::GET for details)
query = list(filter = "open")

# Get all cards that are not archived
all_open = get_request(url, token, query)
}
}
\seealso{
\code{\link[httr]{GET}}, \code{\link[jsonlite]{fromJSON}}, \code{\link{get_token}}
}

